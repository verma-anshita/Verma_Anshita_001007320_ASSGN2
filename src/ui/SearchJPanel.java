/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import javax.swing.table.DefaultTableModel;
import model.Carlist;
import model.Car;

/**
 *
 * @author anshitaverma
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateJPanel
     */
    Carlist details;
    String criteria = "";
     
    public SearchJPanel( Carlist details) {
        initComponents();
        this.details=details;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
     private void clear(){
         txtCompanyName.setText("");
         txtManufacturingYear.setText("");
         txtMin.setText("");
         txtMax.setText("");
         txtSerialNumber.setText("");
         txtModelNumber.setText("");
        chkCertificate.setSelected(false);
        chkRegistered.setSelected(false);
         txtCity.setText("");
    }
     
     private void setDisable(){
         btnFind.setEnabled(false);
         txtCompanyName.setEnabled(false);
         txtManufacturingYear.setEnabled(false);
         txtMin.setEnabled(false);
         txtMax.setEnabled(false);
         txtSerialNumber.setEnabled(false);
         txtModelNumber.setEnabled(false);
         chkCertificate.setEnabled(false);
         chkRegistered.setEnabled(false);
         txtCity.setEnabled(false);
     }
     
      private Object [] getRowObjects(Car car)
     {
                Object[] row=new Object[10];
                row[0]= car;
                row[1]=car.isAvailable();
                row[2]=car.getManufacturedYear();
                row[3]=car.getNumberOfSeat();
                row[4]=car.getSerialNumber();
                row[5]=car.getModelNumber();
                if(car.isRegUber()){
                row[6]= "YES";
                        }
                else{
                    row[6]="NO";
                }
                if(car.isMtCertificate()){
                row[7]= "EXPIRED";
                        }
                else{
                    row[7]="VALID";
                }
                row[8]=car.getCity();
                return row;
     }
     
     
     private void searchFirstAvailable(){
        DefaultTableModel model=(DefaultTableModel)tblView.getModel();
        model.setRowCount(0);
        for(Car car:details.getDetails()){
            if(car.isAvailable())
            {
                Object[] row=getRowObjects(car);
                model.addRow(row);
                break;
            }
        }
     }
     
    
     private void searchAllAvailable(){
        DefaultTableModel model=(DefaultTableModel)tblView.getModel();
        model.setRowCount(0);
        for(Car car:details.getDetails()){
            if(car.isAvailable())
            {
                Object[] row=getRowObjects(car);
                model.addRow(row);
            }
        }
     }
     
     private void searchWithCompany(String criteria, String criteria_value)
     {

        DefaultTableModel model=(DefaultTableModel)tblView.getModel();
        model.setRowCount(0);
        for(Car car:details.getDetails()){
            if(car.getCompany().equals(criteria_value))
            {
               Object[] row=getRowObjects(car);
               model.addRow(row);
            }
        }
     }
     
     private void searchWithYear(String criteria, String criteria_value)
     {

        DefaultTableModel model=(DefaultTableModel)tblView.getModel();
        model.setRowCount(0);
        for(Car car:details.getDetails()){
            if(car.getManufacturedYear().equals(criteria_value))
            {
                Object[] row=getRowObjects(car);
                model.addRow(row);
            }
        }
     }
     
    private void searchWithModel(String criteria, String criteria_value)
     {

        DefaultTableModel model=(DefaultTableModel)tblView.getModel();
        model.setRowCount(0);
        for(Car car:details.getDetails()){
            if(car.getModelNumber().equals(criteria_value))
            {
                Object[] row=getRowObjects(car);
                model.addRow(row);
            }
        }
     }
     
    private void searchWithCity(String criteria, String criteria_value)
     {

        DefaultTableModel model=(DefaultTableModel)tblView.getModel();
        model.setRowCount(0);
        for(Car car:details.getDetails()){
            if(car.getCity().equals(criteria_value))
            {
                Object[] row=getRowObjects(car);
                model.addRow(row);
            }
        }
     }
       
     private void searchWithExpiredCertificate(String criteria, boolean criteria_value)
     {
            DefaultTableModel model=(DefaultTableModel)tblView.getModel();
            model.setRowCount(0);
            for(Car car:details.getDetails()){
                if(car.isMtCertificate() == criteria_value)
                {
                    Object[] row=getRowObjects(car);
                    model.addRow(row);
                }
            }
    }
     
     private void searchWithUberRegistered(String criteria, boolean criteria_value)
     {
            DefaultTableModel model=(DefaultTableModel)tblView.getModel();
            model.setRowCount(0);
            for(Car car:details.getDetails()){
                if(car.isRegUber() == criteria_value)
                {
                    Object[] row=getRowObjects(car);
                    model.addRow(row);
                }
            }
    }
     
     private void searchForNumberOfSeats(String criteria, int min, int max)
     {
            DefaultTableModel model=(DefaultTableModel)tblView.getModel();
            model.setRowCount(0);
            for(Car car:details.getDetails()){
                if(car.getNumberOfSeat() >= min && car.getNumberOfSeat() <= max)
                {
                    Object[] row=getRowObjects(car);
                    model.addRow(row);
                }
            }
    }
     
     private void searchWithSerialNumber(String criteria, int criteria_value)
     {
            DefaultTableModel model=(DefaultTableModel)tblView.getModel();
            model.setRowCount(0);
            for(Car car:details.getDetails()){
                if(car.getSerialNumber() == criteria_value)
                {
                    Object[] row=getRowObjects(car);
                    model.addRow(row);
                }
            }
    }
     
     
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblView = new javax.swing.JTable();
        btnProceed = new javax.swing.JButton();
        cmbFind = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCompanyName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtManufacturingYear = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMin = new javax.swing.JTextField();
        txtMax = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtSerialNumber = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtModelNumber = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        chkCertificate = new javax.swing.JCheckBox();
        chkRegistered = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Luminari", 0, 24)); // NOI18N
        jLabel1.setText("Uber Cars");

        tblView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Company", "Availabilty", "Manufacturing Year", "Number Of Seats", "Serial Number", "Model Numberl", "Registerd with Uber ", "Certificate ", "Operation City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblView);

        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });

        cmbFind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FirstAvailable", "AllAvailable", "CompanyName", "ManufacturingYear", "NumberOfSeats", "SerialNumber", "ModelNumber", "RegisteredWithUber", "OperationalCity", "ExpiredMaintenanceCertificate" }));
        cmbFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFindActionPerformed(evt);
            }
        });

        jLabel2.setText("Select Criteria");

        jLabel3.setText("Company Name:");

        txtCompanyName.setEnabled(false);
        txtCompanyName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCompanyNameKeyReleased(evt);
            }
        });

        jLabel4.setText("Manufacturing Year:");

        txtManufacturingYear.setEnabled(false);

        jLabel5.setText("Min Seats:");

        jLabel6.setText("Max Seats:");

        txtMin.setEnabled(false);

        txtMax.setEnabled(false);

        jLabel7.setText("Serial Number:");

        txtSerialNumber.setEnabled(false);

        jLabel8.setText("Model Number:");

        txtModelNumber.setEnabled(false);

        jLabel9.setText("Registered with Uber:");

        jLabel10.setText("Expired Certificate:");

        jLabel11.setText("Operational City:");

        txtCity.setEnabled(false);

        btnFind.setText("Find");
        btnFind.setEnabled(false);
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        chkCertificate.setText("YES");
        chkCertificate.setEnabled(false);

        chkRegistered.setText("YES");
        chkRegistered.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtSerialNumber))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(40, 40, 40)
                                        .addComponent(chkCertificate)))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cmbFind, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(37, 37, 37)
                                        .addComponent(btnProceed))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(158, 158, 158)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtModelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                                                    .addComponent(txtManufacturingYear)))
                                            .addComponent(jLabel8))
                                        .addGap(46, 46, 46)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(158, 158, 158)
                                        .addComponent(jLabel9)
                                        .addGap(39, 39, 39)
                                        .addComponent(chkRegistered))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(350, 350, 350)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(375, 375, 375)
                .addComponent(btnFind)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnProceed))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtManufacturingYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9)
                    .addComponent(chkCertificate)
                    .addComponent(chkRegistered))
                .addGap(36, 36, 36)
                .addComponent(btnFind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFindActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbFindActionPerformed

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        // TODO add your handling code here:
      clear();
      setDisable();
        if(cmbFind.getSelectedItem().equals("CompanyName")){
            criteria = "CompanyName";
            txtCompanyName.setEnabled(true);
        }
        else if(cmbFind.getSelectedItem().equals("ManufacturingYear")){
             criteria = "ManufacturingYear";
             txtManufacturingYear.setEnabled(true);
        }
        else if(cmbFind.getSelectedItem().equals("NumberOfSeats")){
             criteria = "NumberOfSeats";
             txtMin.setEnabled(true);
             txtMax.setEnabled(true);   
        }
        else if(cmbFind.getSelectedItem().equals("SerialNumber")){
             criteria = "SerialNumber";
             txtSerialNumber.setEnabled(true);    
        }
         else if(cmbFind.getSelectedItem().equals("ModelNumber")){
             criteria = "ModelNumber";
             txtModelNumber.setEnabled(true);    
        }
        else if(cmbFind.getSelectedItem().equals("RegisteredWithUber")){
             criteria = "RegisteredWithUber";
             chkRegistered.setEnabled(true);    
        }
        else if(cmbFind.getSelectedItem().equals("ExpiredMaintenanceCertificate")){
             criteria = "ExpiredMaintenanceCertificate";
             chkCertificate.setEnabled(true);    
        }
        else if(cmbFind.getSelectedItem().equals("OperationalCity")){
             criteria = "OperationalCity";
             txtCity.setEnabled(true);    
        }
        else if(cmbFind.getSelectedItem().equals("FirstAvailable")){
             criteria = "FirstAvailable";
        }
        else if(cmbFind.getSelectedItem().equals("AllAvailable")){
             criteria = "AllAvailable";
        }
        
        btnFind.setEnabled(true);
        
    }//GEN-LAST:event_btnProceedActionPerformed

    private void txtCompanyNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCompanyNameKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtCompanyNameKeyReleased

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        if(criteria.equals("CompanyName"))
        {
            searchWithCompany("CompanyName", txtCompanyName.getText());
        }
        else if(criteria.equals("ManufacturingYear"))
        {
            searchWithYear("ManufacturingYear", txtManufacturingYear.getText());
        }
        else if(criteria.equals("NumberOfSeats"))
        {
            searchForNumberOfSeats("NumberOfSeats",Integer.parseInt(txtMin.getText()),Integer.parseInt(txtMax.getText()));
        }
        else if(criteria.equals("SerialNumber"))
        {
           searchWithSerialNumber("SerialNumber",Integer.parseInt(txtSerialNumber.getText()));
        }
        else if(criteria.equals("ModelNumber"))
        {
            searchWithModel("ModelNumber", txtModelNumber.getText());
        }
        else if(criteria.equals("RegisteredWithUber"))
        {
            searchWithUberRegistered("RegisteredWithUber", chkRegistered.isSelected());
        }
        else if(criteria.equals("ExpiredMaintenanceCertificate"))
        {
            searchWithExpiredCertificate("ExpiredMaintenanceCertificate",chkCertificate.isSelected());
        }
        else if(criteria.equals("OperationalCity"))
        {
            searchWithCity("OperationalCity", txtCity.getText());
        }
        else if(criteria.equals("FirstAvailable")||cmbFind.getSelectedItem().equals("FirstAvailable")){
            searchFirstAvailable();
        }
        else if(criteria.equals("AllAvailable")||cmbFind.getSelectedItem().equals("AllAvailable")){
            searchAllAvailable();
        }
        
    }//GEN-LAST:event_btnFindActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnProceed;
    private javax.swing.JCheckBox chkCertificate;
    private javax.swing.JCheckBox chkRegistered;
    private javax.swing.JComboBox<String> cmbFind;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblView;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCompanyName;
    private javax.swing.JTextField txtManufacturingYear;
    private javax.swing.JTextField txtMax;
    private javax.swing.JTextField txtMin;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtSerialNumber;
    // End of variables declaration//GEN-END:variables
}
